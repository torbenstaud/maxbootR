// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dbMaxC
NumericVector dbMaxC(NumericVector x, int block_size);
RcppExport SEXP _maxbootR_dbMaxC(SEXP xSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dbMaxC(x, block_size));
    return rcpp_result_gen;
END_RCPP
}
// seqC
NumericVector seqC(int a, int b);
RcppExport SEXP _maxbootR_seqC(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(seqC(a, b));
    return rcpp_result_gen;
END_RCPP
}
// slidMaxC
NumericVector slidMaxC(NumericVector xx, int r);
RcppExport SEXP _maxbootR_slidMaxC(SEXP xxSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(slidMaxC(xx, r));
    return rcpp_result_gen;
END_RCPP
}
// repC
NumericVector repC(double val, int times);
RcppExport SEXP _maxbootR_repC(SEXP valSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(repC(val, times));
    return rcpp_result_gen;
END_RCPP
}
// kMaxTrC
NumericVector kMaxTrC(NumericVector sample, int r, int k);
RcppExport SEXP _maxbootR_kMaxTrC(SEXP sampleSEXP, SEXP rSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kMaxTrC(sample, r, k));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_doubles
NumericVector convert_to_doubles(CharacterVector char_vec);
RcppExport SEXP _maxbootR_convert_to_doubles(SEXP char_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type char_vec(char_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_doubles(char_vec));
    return rcpp_result_gen;
END_RCPP
}
// meanCTabVec
double meanCTabVec(NumericVector xx);
RcppExport SEXP _maxbootR_meanCTabVec(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(meanCTabVec(xx));
    return rcpp_result_gen;
END_RCPP
}
// varCTabVec
double varCTabVec(NumericVector xx);
RcppExport SEXP _maxbootR_varCTabVec(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(varCTabVec(xx));
    return rcpp_result_gen;
END_RCPP
}
// neg_log_likelihood_gev
double neg_log_likelihood_gev(NumericVector theta, NumericVector xx);
RcppExport SEXP _maxbootR_neg_log_likelihood_gev(SEXP thetaSEXP, SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_log_likelihood_gev(theta, xx));
    return rcpp_result_gen;
END_RCPP
}
// neg_log_likelihood_gev_univ
double neg_log_likelihood_gev_univ(NumericVector theta, double x);
RcppExport SEXP _maxbootR_neg_log_likelihood_gev_univ(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_log_likelihood_gev_univ(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// neg_log_likelihood_gev_lvec
double neg_log_likelihood_gev_lvec(NumericVector theta, NumericVector xx);
RcppExport SEXP _maxbootR_neg_log_likelihood_gev_lvec(SEXP thetaSEXP, SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_log_likelihood_gev_lvec(theta, xx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_maxbootR_dbMaxC", (DL_FUNC) &_maxbootR_dbMaxC, 2},
    {"_maxbootR_seqC", (DL_FUNC) &_maxbootR_seqC, 2},
    {"_maxbootR_slidMaxC", (DL_FUNC) &_maxbootR_slidMaxC, 2},
    {"_maxbootR_repC", (DL_FUNC) &_maxbootR_repC, 2},
    {"_maxbootR_kMaxTrC", (DL_FUNC) &_maxbootR_kMaxTrC, 3},
    {"_maxbootR_convert_to_doubles", (DL_FUNC) &_maxbootR_convert_to_doubles, 1},
    {"_maxbootR_meanCTabVec", (DL_FUNC) &_maxbootR_meanCTabVec, 1},
    {"_maxbootR_varCTabVec", (DL_FUNC) &_maxbootR_varCTabVec, 1},
    {"_maxbootR_neg_log_likelihood_gev", (DL_FUNC) &_maxbootR_neg_log_likelihood_gev, 2},
    {"_maxbootR_neg_log_likelihood_gev_univ", (DL_FUNC) &_maxbootR_neg_log_likelihood_gev_univ, 2},
    {"_maxbootR_neg_log_likelihood_gev_lvec", (DL_FUNC) &_maxbootR_neg_log_likelihood_gev_lvec, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_maxbootR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
